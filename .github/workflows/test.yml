name: proj ci

on:
    push:
        branches:
            - main
            - staging
            - trying
            - winbuilds
    pull_request:
 
jobs:
    proj-windows:
        strategy:
            fail-fast: false
            matrix:
                include:
                    - { os: windows-2019, features: "", sys: mingw64, env: x86_64 }
                    - { os: windows-2019, features: "", sys: ucrt64,  env: ucrt-x86_64 }
                    - { os: windows-2019, features: "", sys: clang64, env: clang-x86_64 }
                    - { os: windows-2019, features: "--features network", sys: mingw64, env: x86_64 }
                    - { os: windows-2019, features: "--features network", sys: ucrt64,  env: ucrt-x86_64 }
                    - { os: windows-2019, features: "--features network", sys: clang64, env: clang-x86_64 }
                    - { os: windows-2022, features: "", sys: mingw64, env: x86_64 }
                    - { os: windows-2022, features: "", sys: ucrt64,  env: ucrt-x86_64 }
                    - { os: windows-2022, features: "", sys: clang64, env: clang-x86_64 }
                    - { os: windows-2022, features: "--features network", sys: mingw64, env: x86_64 }
                    - { os: windows-2022, features: "--features network", sys: ucrt64,  env: ucrt-x86_64 }
                    - { os: windows-2022, features: "--features network", sys: clang64, env: clang-x86_64 }

        runs-on: ${{ matrix.os }}
        defaults:
            run: 
                shell: msys2 {0}
        steps:            
          - name: Get msys2 into PATH
            shell: pwsh
            run: echo "C:\msys64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                
          - name: Install dependencies
            #if: steps.cache-restore.outputs.cache-hit != 'true'
            uses: msys2/setup-msys2@v2
            with:
                msystem: ${{ matrix.sys }}
                install: >-
                    mingw-w64-${{ matrix.env }}-libtiff
                    mingw-w64-${{ matrix.env }}-gcc
                    mingw-w64-${{ matrix.env }}-cmake
                    mingw-w64-${{ matrix.env }}-rust
                    mingw-w64-${{ matrix.env }}-clang
            
          - name: Replace msys2 default of pkgconf with pkg-config
            run: |
                pacman -R -dd --noconfirm mingw-w64-${{ matrix.env }}-pkgconf
                pacman -S --noconfirm mingw-w64-${{ matrix.env }}-pkg-config
        
          - name: Install proj to link to
            run: |
                wget https://repo.msys2.org/mingw/${{ matrix.sys }}/mingw-w64-${{ matrix.env }}-proj-9.1.0-1-any.pkg.tar.zst
                pacman -U --noconfirm mingw-w64-${{ matrix.env }}-proj-9.1.0-1-any.pkg.tar.zst
            
          # This would be how to make sure the MSYS2 build environment can find an existing proj
          #- name: Export existing proj installation to msys2 path
          #  run: |
                # export PATH="drive_letter/path_to_existing_proj_installation":$PATH

          - uses: actions/checkout@v3
          - name: Build
            run: |
                cargo build ${{ matrix.features }}
                cargo test ${{ matrix.features }}
                
    # proj-sys-windows:
        # strategy:
            # matrix:
                # arch: ['ucrt-x86_64']
                # compiler: ['UCRT64']
                # os: ['windows-2022']
                # features: [""]
        # runs-on: ${{ matrix.os }}
        # defaults:
            # run:
                # shell: msys2 {0}
        # steps:
          # - name: Install dependencies
            # uses: msys2/setup-msys2@v2
            # with:
                # msystem: ${{ matrix.compiler }}
                # install: >-
                    # mingw-w64-${{ matrix.arch }}-libtiff
                    # mingw-w64-${{ matrix.arch }}-gcc
                    # mingw-w64-${{ matrix.arch }}-cmake
                    # mingw-w64-${{ matrix.arch }}-rust
                    # mingw-w64-${{ matrix.arch }}-sqlite3
                    # mingw-w64-${{ matrix.arch }}-clang 
          # - uses: actions/checkout@v3
          # - name: Replace pkgconf with pkg-config
            # run: |
                # set MSYSTEM=${{ matrix.compiler }}
                # pacman -R -dd --noconfirm mingw-w64-${{ matrix.arch }}-pkgconf
                # pacman -S --noconfirm mingw-w64-${{ matrix.arch }}-pkg-config
                
          # - name: Build and test
            # run: |
                # set MSYSTEM=${{ matrix.compiler }}
                # cargo rustc -p proj-sys
                # cd proj-sys
                # cargo test

# jobs:
# # The `ci-result` job doesn't actually test anything - it just aggregates the
# # overall build status for bors, otherwise our bors.toml would need an entry
# # for each individual job produced by the job-matrix.
# #
# # Ref: https://github.com/rust-lang/crater/blob/9ab6f9697c901c4a44025cf0a39b73ad5b37d198/.github/workflows/bors.yml#L125-L149
# #
# # ALL THE SUBSEQUENT JOBS NEED THEIR key ADDED TO THE `needs` SECTION OF THIS JOB!
# ci-result:
# name: ci result
# runs-on: ubuntu-latest
# needs:
# - proj-ubuntu
# - proj-sys-ubuntu
# - proj-macos
# - proj-sys-macos
# steps:
# - name: Mark the job as a success
# if: success()
# run: exit 0
# - name: Mark the job as a failure
# if: "!success()"
# run: exit 1

# proj-ubuntu:
# name: proj ubuntu
# if: "!contains(github.event.head_commit.message, '[skip ci]')"
# runs-on: ubuntu-latest
# strategy:
# fail-fast: false
# matrix:
# container_image:
# # Minimum supported rust (MSRV)
# - "georust/proj-ci:proj-9.1.0-rust-1.63"
# # Latest stable rust
# - "georust/proj-ci:proj-9.1.0-rust-1.70"
# features:
# - ""
# - "--features network"
# - "--features bundled_proj"
# - "--no-default-features"
# - "--features \"network bundled_proj\""
# - "--features \"network geo-types\""
# - "--features \"bundled_proj geo-types\""
# - "--features \"network bundled_proj geo-types\""
# container:
# image: ${{ matrix.container_image }}
# steps:
# - name: Checkout repository
# uses: actions/checkout@v2
# - run: cargo build ${{ matrix.features }}
# - run: cargo test ${{ matrix.features }}

# proj-macos:
# name: proj macos
# if: "!contains(github.event.head_commit.message, '[skip ci]')"
# runs-on: macos-latest
# strategy:
# fail-fast: false
# matrix:
# features: ["", "--features network"]
# steps:
# - name: Checkout repository
# uses: actions/checkout@v2
# - run: cargo build ${{ matrix.features }}
# - run: cargo test ${{ matrix.features }}

# proj-sys-ubuntu:
# name: proj-sys ubuntu
# if: "!contains(github.event.head_commit.message, '[skip ci]')"
# runs-on: ubuntu-latest
# defaults:
# run:
# working-directory: proj-sys
# container: ${{ matrix.container }}
# strategy:
# matrix:
# include:
# # Minimum supported rust (MSRV)
# - container:
# image: georust/proj-ci:proj-9.1.0-rust-1.63
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
# features: ""
# - container:
# image: georust/proj-ci:proj-9.1.0-rust-1.63
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
# features: "--features bundled_proj"
# - container:
# image: georust/proj-ci-without-system-proj:proj-9.1.0-rust-1.63
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
# features: ""

# # Latest stable rust
# - container:
# image: georust/proj-ci:proj-9.1.0-rust-1.70
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
# features: ""
# - container:
# image: georust/proj-ci:proj-9.1.0-rust-1.70
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
# features: "--features bundled_proj"
# - container:
# image: georust/proj-ci-without-system-proj:proj-9.1.0-rust-1.70
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 1
# features: ""
# steps:
# - name: Checkout repository
# uses: actions/checkout@v2
# - run: cargo build ${{ matrix.features }}
# - run: cargo test ${{ matrix.features }}

# proj-sys-macos:
# name: proj-sys macos
# if: "!contains(github.event.head_commit.message, '[skip ci]')"
# runs-on: macos-latest
# env:
# _PROJ_SYS_TEST_EXPECT_BUILD_FROM_SRC: 0
# defaults:
# run:
# working-directory: proj-sys
# steps:
# - name: Checkout repository
# uses: actions/checkout@v2
# # At some point around Feb. 2023, the GH macos CI runner no longer had
# # pkg-config installed by default, so we need to install it manually.
# #
# # This PR (merged a couple days ago) adds pkg-config back to the macos
# # build: https://github.com/actions/runner-images/pull/7125
# #
# # but it seems like it hasn't been deployed yet. At some point we should
# # be able to delete this step if CI passes.
# - run: brew install pkg-config
# - run: brew install proj
# - run: cargo test
